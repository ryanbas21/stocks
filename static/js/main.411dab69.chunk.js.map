{"version":3,"sources":["logo.svg","features/search/index.jsx","features/stock-container/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","features_search","props","react_default","a","createElement","className","TextInput","value","onChange","onSubmit","Button","fill","onClick","label","stock_container","Box","pad","elevation","children","App","state","stocks","e","target","_this","setState","fetch","then","res","json","_ref","quote","concat","this","map","stock","companyName","symbol","change","latestPrice","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.411dab69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { TextInput, Button } from \"grommet\";\nimport \"./search.css\";\n\nexport default props => (\n  <div className=\"search-container\">\n    <div className=\"inline-search\">\n      <TextInput\n        value={props.value}\n        onChange={props.onChange}\n        onSubmit={props.onSubmit}\n      />\n      <Button fill={false} onClick={props.onClick} label={\"Add To Portfolio\"} />\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport { Box } from \"grommet\";\n\nexport default props => {\n  return (\n    <Box pad=\"medium\" elevation=\"medium\">\n      {props.children}\n    </Box>\n  );\n};\n","import React, { Component } from \"react\";\nimport { Search } from \"./features\";\nimport { Container } from \"./features\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    stocks: []\n  };\n  onChange = e => {\n    const value = e.target.value;\n    this.setState({\n      value\n    });\n  };\n  onClick = e => {\n    fetch(\"https://api.iextrading.com/1.0/stock/\" + this.state.value + \"/book\")\n      .then(res => res.json())\n      .then(({ quote: value }) => {\n        return value;\n      })\n      .then(value => {\n        this.setState({\n          stocks: this.state.stocks.concat(value)\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Search\n          value={this.state.value}\n          onChange={this.onChange}\n          onClick={this.onClick}\n          onSubmit={this.onSubmit}\n        />\n        <Container>\n          {this.state.stocks.map(stock => (\n            <div>\n              <div>{stock.companyName}</div>\n              <div>{stock.symbol}</div>\n              <div>{stock.change}</div>\n              <div>Price: {stock.latestPrice}</div>\n            </div>\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}